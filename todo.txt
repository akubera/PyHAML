

- Start thinking about exception handling (and making sense of it).
    
    It would be very nice if there was a way to adapt exception tracebacks
    similar to how Mako does it so that errors can be traced back to the
    original HAML source.
    
    All mako does is throw comments into the compiled template the line number
    of the source. So if we added:
    
        ## PyHAML SOURCE LINE (\d+)
    
    This should not have any effect on the final mako at all.

- Consider renaming some node classes:
    Comment -> HTMLComment
    Silent -> HamlComment
    Filtered -> Filter

- doctypes should be able to add nodes to the stack to wrap everything
    - good for "!!! xsl stylesheet 1.0"
    - should this indent the whole file?

- default xml doctypes should actually be "xhtml"

- tag closing names should only be references in HTML mode
    - add an html_mode attribute to the engine

- engine should have feature mode attributes such as:
    - html_closes (very few things should self close)

- Should standardize on either "Engine", "Compiler", or "Generator".

- The engine should have backend specific methods for the following:
    - boolean attributes (ie HTML vs XHTML versions)
    - expressions
    - control statements (start and end)


- Add +function shortcut for <%call ... /> tag:
	- A function call like:
		+example(1, 2)<
			content
	  would compile to:
		<%call name="something" args="1, 2">content</%call>
	- Remember that the content of the tag is availible to the funciton as
	  ${caller.body}
	- Could do very similar syntax to define a function as well:
		@example(*args)
			ul - for arg in args:
				li=|h arg
			= caller.body

- Some tags should only have content and no possibility of sub-tags. eg. script,
style, etc. We should move the determination of if a node is greedy to a
method on the node itself so that normals tags may also be greedy given the
tag name. This method should also specify what type of node the children
should be. Ie. a greedy tag would only be content.
