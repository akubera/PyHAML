
- Extend the Mako loader class to automatically compile mako.
    - Make sure it caches the results!
    
- Start thinking about exception handling (and making sense of it).
    
    It would be very nice if there was a way to adapt exception tracebacks
    similar to how Mako does it so that errors can be traced back to the
    original HAML source.

- Consider renaming some node classes:
    Comment -> HTMLComment
    Silent -> HamlComment
    Filtered -> Filter

- Should standardize on either "Engine", "Compiler", or "Generator".

- The engine should have backend specific methods for the following:
    - boolean attributes (ie HTML vs XHTML versions)
    - expressions
    - control statements (start and end)

- Can we support other engines?
    - Django
    - Jinja
    - Cheetah
    - Genshi (even though they already have something similar)
    - the one that comes with WerkZeug
    - really simple one that uses #{...} syntax
    
    Will likely need to not have arbitrary code inclusion, but I don't know
    if HAML actually specifies that you can do this. I can scan expressions
    for control structures to add a little bit more to it but that may be it.
        
